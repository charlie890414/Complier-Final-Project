program		: _stmt+

_stmt		: _exp 
			| def_stmt
			| _print_stmt

_print_stmt	: print_num | print_bool
print_num	: "(" "print-num" _exp ")"
print_bool	: "(" "print-bool" _exp ")"

_exp		: BOOL_VAL | NUMBER | _variable | _num_op | _logical_op | fun_exp | fun_call | if_exp

_num_op		: plus | minus | multiply | divide | modulus | greater | smaller | equal
plus		: "(" "+" _exp _exp+ ")"
minus		: "(" "-" _exp _exp ")"
multiply	: "(" "*" _exp _exp+ ")"
divide		: "(" "/" _exp _exp ")"
modulus		: "(" "mod" _exp _exp ")"
greater		: "(" ">" _exp _exp ")"
smaller		: "(" "<" _exp _exp ")"
equal		: "(" "=" _exp _exp+ ")"
_logical_op	: and_op | or_op | not_op
and_op		: "(" "and" _exp _exp+ ")"
or_op		: "(" "or" _exp _exp+ ")"
not_op		: "(" "not" _exp ")"

def_stmt	: "(" "define" _variable _exp ")"
_variable	: ID

fun_exp		: "(" "fun" fun_ids fun_body ")"
fun_ids		: "(" ID* ")"
fun_body	: def_stmt* _exp
fun_call	: "(" fun_exp _param* ")"
			| "(" fun_name _param* ")"
_param		: _exp
last_exp	: _exp
fun_name	: ID

if_exp		: "(" "if" _test_exp _then_exp _else_exp ")"
_test_exp	: _exp
_then_exp	: _exp
_else_exp	: _exp

DIGIT		: "0".."9"
BOOL_VAL	: "#t" | "#f"
NUMBER		: ["+"|"-"] DIGIT+
LETTER 		: "a".."z"
ID 			: LETTER (LETTER | DIGIT | "-")*
WS			: /[ \t\r\n]/+
%ignore WS